// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/portworx/dcos-secrets (interfaces: DCOSSecrets)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	dcos_secrets "github.com/portworx/dcos-secrets"
	reflect "reflect"
)

// MockDCOSSecrets is a mock of DCOSSecrets interface
type MockDCOSSecrets struct {
	ctrl     *gomock.Controller
	recorder *MockDCOSSecretsMockRecorder
}

// MockDCOSSecretsMockRecorder is the mock recorder for MockDCOSSecrets
type MockDCOSSecretsMockRecorder struct {
	mock *MockDCOSSecrets
}

// NewMockDCOSSecrets creates a new mock instance
func NewMockDCOSSecrets(ctrl *gomock.Controller) *MockDCOSSecrets {
	mock := &MockDCOSSecrets{ctrl: ctrl}
	mock.recorder = &MockDCOSSecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDCOSSecrets) EXPECT() *MockDCOSSecretsMockRecorder {
	return m.recorder
}

// CreateOrUpdateSecret mocks base method
func (m *MockDCOSSecrets) CreateOrUpdateSecret(arg0, arg1 string, arg2 *dcos_secrets.Secret) error {
	ret := m.ctrl.Call(m, "CreateOrUpdateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateSecret indicates an expected call of CreateOrUpdateSecret
func (mr *MockDCOSSecretsMockRecorder) CreateOrUpdateSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).CreateOrUpdateSecret), arg0, arg1, arg2)
}

// CreateSecret mocks base method
func (m *MockDCOSSecrets) CreateSecret(arg0, arg1 string, arg2 *dcos_secrets.Secret) error {
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret
func (mr *MockDCOSSecretsMockRecorder) CreateSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).CreateSecret), arg0, arg1, arg2)
}

// DeleteSecret mocks base method
func (m *MockDCOSSecrets) DeleteSecret(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret
func (mr *MockDCOSSecretsMockRecorder) DeleteSecret(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).DeleteSecret), arg0, arg1)
}

// GetSecret mocks base method
func (m *MockDCOSSecrets) GetSecret(arg0, arg1 string) (*dcos_secrets.Secret, error) {
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*dcos_secrets.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockDCOSSecretsMockRecorder) GetSecret(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).GetSecret), arg0, arg1)
}

// RenewSecret mocks base method
func (m *MockDCOSSecrets) RenewSecret(arg0, arg1 string, arg2 int64) error {
	ret := m.ctrl.Call(m, "RenewSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewSecret indicates an expected call of RenewSecret
func (mr *MockDCOSSecretsMockRecorder) RenewSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).RenewSecret), arg0, arg1, arg2)
}

// RevokeSecret mocks base method
func (m *MockDCOSSecrets) RevokeSecret(arg0, arg1 string) error {
	ret := m.ctrl.Call(m, "RevokeSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecret indicates an expected call of RevokeSecret
func (mr *MockDCOSSecretsMockRecorder) RevokeSecret(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).RevokeSecret), arg0, arg1)
}

// UpdateACSToken mocks base method
func (m *MockDCOSSecrets) UpdateACSToken(arg0 string) {
	m.ctrl.Call(m, "UpdateACSToken", arg0)
}

// UpdateACSToken indicates an expected call of UpdateACSToken
func (mr *MockDCOSSecretsMockRecorder) UpdateACSToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateACSToken", reflect.TypeOf((*MockDCOSSecrets)(nil).UpdateACSToken), arg0)
}

// UpdateSecret mocks base method
func (m *MockDCOSSecrets) UpdateSecret(arg0, arg1 string, arg2 *dcos_secrets.Secret) error {
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret
func (mr *MockDCOSSecretsMockRecorder) UpdateSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockDCOSSecrets)(nil).UpdateSecret), arg0, arg1, arg2)
}
